网络编程就是让程序与网络上的其他程序进行数据交互！
常见的通信模式 Client-Server（CS）、Browser/Server（B/S）
客户端需要程序员开发 用户需要安装客户端  服务端也需要程序员开发！（CS模式）
B代表Browser 浏览器不需要程序员开发实现浏览器 用户需要安装浏览器、但是程序员需要开发实现服务端！
本节要学习1.网络通信的三要素 2.UDP通信（无需确认，无论在线与否 都发送消息） 3.TCP（基于可靠传输的通信模式）4.及时通讯5.模拟BS系统。
1.网络通信的三要素：Ip地址、端口号、协议
ip地址是设备在网络中的地址，是唯一的标志
端口是程序在设备中的唯一标志
协议是数据在网络中的传输规则，常见的有UDP和TCP协议
IP地址分为Ipv4和Ipv6. Ipv4 有四个八位二进制数组成一共32bit
ip地址可以分为公网地址和私有地址（局域网使用）。
192.168.开头的就是常见的局域网、范围就是192.168.0.0-192.168.255.255 转为组织机构内部使用。
ipconfig 查看本机ip
pingIP地址  检查网络是否连通！
本机IP：127.0.0.1 或者localhost 称为回送地址当前所在本机。

IP地址操作类 InetAddress 
常见API：
1.InetAddress getLocalHost() 返回本主机的地址对象
2.InetAddress getByName() 得到指定主机IP地址对象，参数是域名或IP地址
3.getHostName()得到主机名
4.getHostAddress（）得到ip地址


端口号：标志正在计算机设备上运行的进程（程序），被规定为一个16位的二进制 范围为0-65535.
端口类型：
周知端口（0-1023）： 被预先定义的知名应用占用（如HTTP要占用80 FTP要占用21）。
注册端口：（1024-49151） 分配给用户进程或某些应用程序，如Tomcat占用8080，MySQL占用3306
动态端口：（49152-65535） 
设计程序选择注册端口需要选择注册端口，但是一个设备不能出现两个程序端口号一致！

通信协议：连接和通信数据的规则
传输层：TCP（传输控制协议）、UDP（用户数据协议）
TCP是一种面向连接的可靠通信的协议。
传输前，采用“三次握手”建立连接所以是可靠的，在TCP中连接、发送数据都需要建立连接，传输完毕后，还要释放已建立的连接。通信效率低。
TCP协议通信场景：对信息安全要求较高的场景
断开连接：四次挥手
客户端像服务器发出取消连接、服务器向客户端返回一个响应，表示收到客户端取消请求（并将最后的数据处理完毕）、服务器再想客户端发出确认取消的消息、客户端再次发送确认消息！

UDP是一种无连接、不可靠的协议。将数据源IP、目的地IP和端口封装成数据包，不需要建立连接。
每个数据包大小限制在64KB内，发送不管对方有没有准备好

UDP通信：
1.首先要有一个数据包对象：DatagramPacket（韭菜盘子）
构造器：
  1.DatagramPacket（byte[] buf,int length,InetAddress address,int port）(要发送的内容，字节数组、发送内容的字节长度、接收端的ip地址对象、接收端的端口号) 这是发送端数据包对象
  2.DatagramPacket（byte[] buf,int length） 这是接收端数据包对象
2.DatagramSocket：发送端和接收端对象（人）
构造器：
  1.DatagramSocket（） 创建发送端的Socket对象，系统随机分配一个端口号
  2.DatagramSocket（int port）创建接收端的Socket对象并制定端口。
DatagramSocket类的方法：
1.send（DatagramPacket dp）  发送数据包
2.receive（DatagramPacket dp） 接受数据包
案例：
 发送端：
   System.out.println("===客户端启动=====");
        //创建发送端对象
        DatagramSocket d1=new DatagramSocket();
        //创建一个数据包对象
        byte[] b="我是一颗快乐的韭菜，你愿意吃吗？".getBytes();
        DatagramPacket dp1=new DatagramPacket(b,b.length,InetAddress.getLocalHost(),8888);
        //发送数据
        d1.send(dp1);
        d1.close();
 接收端：
    System.out.println("====服务端启动=====");
        DatagramSocket d2=new DatagramSocket(8888);//接收端Socket对象
        byte[]buffer=new byte[1024 *64];
        DatagramPacket dp=new DatagramPacket(buffer,buffer.length);
        //等待接收数据
        d2.receive(dp);
        //取出数据
        int len=dp.getLength();
        String rs=new String(buffer,0,len);
        System.out.println("收到："+rs);
        d2.close();
可以通过数据包对象获取发送端的ip地址和端口
上面的通信方式是一发和一收，下面来看多发多收
多发多收分析：
  1）发送端可以一直发送消息
  2）接收端可以不断的接收多个发送端的消息展示
  3）发送端输入了exit则结束发送端程序
UDP可以支持广播和组播！
单播：单台主机与单台主机之间的通信
广播：当前主机与所在网络中的所有主机通信
组播：当前主机与选定的一组主机通信
使用UDP实现广播：使用广播地址 255.255.255.255
具体操作：
  1.发送端发送的数据包的目的地写广播地址且指定端口（255.255.255.255 9999）
  2.本机所在网段的其他主机程序只需要匹配端口成功即可收到消息！
使用UDP实现组播：
  组播地址：224.0.0.0--239.255.255.255
  具体操作：
    1.发送端的数据包的目的地是组播ip（例如 224.0.0.1 9999）
    2.接收端必须绑定该组播ip，端口还要对应发送目的端口999就可以接受组播
    3.DatagramSocket的子类MulticastSocket可以在接收端绑定组播ip

TCP通信
  在java中客户端只需要使用Socket类即可实现TCP通信，底层就是使用了TCP协议
  Socket类
构造器：Socket（String host,int port）创造发送端的Socket对象，参数为ip和端口
方法：
  getOutPutStream（） 获得字节输出流对象
  getInputStream（） 获得字节输入流对象
案例：客户端发送消息：
  1.创建客户端Socket对象，与服务器端连接
  2.使用Socket对象调用getOutputStream（）方法获得字节输出流
  3.使用字节输出流完成数据的发送
  4.释放资源：关闭Socket管道
在java中需要使用ServerSocket类（服务端类）
构造器：ServerSocket（int port）
常用方法：
  1.accept（） 等待接收客户端的Socket通信连接，连接成功后返回Socket对象与客户端建立端到端通信。
服务器端的流程：
  1.使用ServerSocket构造Socket 
  2.调用accept（）方法等待Socket请求
  3.accept方法返回一个Socket管道，从该管道中获得一个字节输入流
  4.将该字节输入流包装成一个高级流（缓冲字符输入流），但是缓冲字符输入流智能通过包装字符输入流来获得，所以需要使用转换流（new inputstreamReader(inputstream)）！！
  5.使用缓冲字符输入流的最快方法（按照行读取数据）
下面来一个TCP通信的一收一发的案例：
  客户端：
 System.out.println("客户端启动成功！");
        //创建Socket对象
        Socket s=new Socket(InetAddress.getLocalHost(),7777);
        //调用输出流方法
        OutputStream os=s.getOutputStream();
        //把输出流包装为高级流
        PrintStream ps=new PrintStream(os);
        //发送消息
        ps.println("我是TCP的客户端，我已经与你对接，并发出邀请！！！！约吗？");
        ps.flush();
  服务器端：
System.out.println("服务端启动成功！");
        try {
            ServerSocket ser = new ServerSocket(7777);
            //用accept等待接收连接请求建立管道 返回一个Socket管道
            Socket s1=ser.accept();
            //从Socket管道中接收一个字节输入流来读数据
            InputStream in=s1.getInputStream();
            //把字节输入流包装为高级流 缓冲字符输入流
            BufferedReader br=new BufferedReader(new InputStreamReader(in));
            //按照行读取消息
            String msg;
          if((msg=br.readLine())!=null){
                System.out.println(s1.getRemoteSocketAddress()+"说了"+msg);
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
TCP实现多发多收：
  客户端：
    //创建客户端Socket对象
        Socket s=new Socket("127.0.0.1",8888);
        //获取字节输出流
        OutputStream os=s.getOutputStream();
        //包装成打印流
        PrintStream ps=new PrintStream(os);

        Scanner sc=new Scanner(System.in);
        while(true){
            System.out.println("请说：");
            String msg=sc.nextLine();
            if(msg.equals("exit")){
                break;
            }
            ps.println(msg);
            ps.flush();
        }
服务器端：
  System.out.println("====服务端启动=====");
        //创建服务器端Socket
        ServerSocket ser=new ServerSocket(8888);

        //一直接收！

            //等待连接  连接成功的话 返回Socket对象
            Socket s2=ser.accept();
            //获取字节输入流
            InputStream in=s2.getInputStream();
            //将低端的输入流包装秤高端的缓冲字符输入流
            BufferedReader br=new BufferedReader(new InputStreamReader(in));
            String msg;
        while((msg=br.readLine())!=null){
            System.out.println(s2.getRemoteSocketAddress()+"说了："+msg);
        }
虽然实现了多发多收但如何实现服务端同时接收多个客户端的消息？（感觉要用到多线程！！！！！！！！）  
  需要服务端接收多个客户端的消息、需要使用多线程。
    服务端接收多个服务端的消息 （重点！！）
1.引入多线程
首先在主线程中，写一个死循环，可以接受Socket管道连接
创建一个类继承Thread类 重写run函数
   private Socket s1;

    public ServerReaderThread(Socket s) {
        s1 = s;
    }

    @Override
    public void run() {
        //获取字节输入流
        try {
            InputStream in = s1.getInputStream();
            //将低端的输入流包装成高端的缓冲字符输入流
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String msg;
            while ((msg = br.readLine()) != null) {
                System.out.println(s1.getRemoteSocketAddress() + "说了：" + msg);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
  使用多线程，也可以使用线程池优化！使服务端可以接收多个请求，
//使用静态变量记住一个线程池对象
    private static ExecutorService pools=new ThreadPoolExecutor(3,5,6, TimeUnit.SECONDS,
            new ArrayBlockingQueue<>(2), Executors.defaultThreadFactory(),new ThreadPoolExecutor.AbortPolicy());

    //创建服务器端端口
    public static void main(String[] args) throws Exception {
        System.out.println("====服务端启动=====");
        //创建服务器端Socket
        ServerSocket ser=new ServerSocket(6666);
        //定义一个死循环 由主线程负责不断地接收客户端的请求
        while (true) {
            //一直接收！
            //等待连接  连接成功的话 返回Socket对象
            Socket s2=ser.accept();
           //每接收到一个客户端的Socket管道，交给一个独立的子线程负责读取消息
            //开始创建独立子线程！！！
            System.out.println(s2.getRemoteSocketAddress()+"它来了，上线了！");
            Runnable target=new ServerReaderRunnable(s2);
            pools.execute(target);
            }
