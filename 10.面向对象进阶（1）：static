1.简介：
  关注语法点的基本作用，多进行思考和记忆以及联系、要自信！！！！！
  这一节将学习：
    1）static 关键字（类中只有一份 所有类的对象共享！）
    2）设计模式：单例 （如何实现一个类智能对外产生一个对象！）
    3）面向对象的三大特征：继承！
static 是静态的意思 可以修饰成员变量和成员方法，static修饰的成员变量指挥在堆内存中只存储一份（静态变量区！），可以被共享访问和修改
静态成员变量 属于类，内存中只加载一次，表示如在线人数信息等需要被共享的信息可以被共享访问。 通过 类名.静态变量
在同一个类中访问静态成员变量可以直接调用静态成员变量。
无static修饰的成员变量称为实例变量，存在于每个对象中，但是有static修饰的成员变量存在于内存中，只加载一次，所有类的变量共享！  

静态成员变量的内存原理：在java中，类先被加载到方法区中，与此同时，堆内存中的静态变量区就会创建一个静态变量出来！可通过类名访问
    然后main（）函数被加载到栈内存中，一步步的去运行，变量被new出来的时候 对象变量在栈内存中存储的是地址值，堆内存中存放了对象具体成员变量值。

除了用static修饰成员变量 还可以用static修饰成员方法！！！
方法分为：静态成员方法（建议用类名去访问）、实例成员方法（用对象去触发访问）。
使用场景：
  1.如果表示对象自己的行为，且方法中需要访问实例成员的， 方法必须声明为实例方法
  2.如果该方法是为了实行一个共用功能为目的，定义为  静态方法。
静态方法的内存原理：
  1.方法首先是都存储在方法区 当类被加载到方法区的时候 静态方法会同时在方法区被存储，所以可以不创建对象通过类名来调用
  当一个新的类对象被创建出来后，成员变量都存在堆方法区 堆内存中的方法变量中存储的是该方法在方法区的地址！
static 的注意事项：
  1.静态方法只能访问静态成员  不可以直接访问实例成员
  2.实例方法可以访问静态成员，也可以访问实例成员
  3.静态方法中不可以出现this关键字。

static 工具类： 类中都是一些静态方法，每个方法都是以完成一个共用功能为目的 这个类是用来给系统开发人员来调用使用的！
由于工具类里的方法都是静态方法，所以工具类无需创建对象，所以可以将工具类的构造器进行私有！ 直接用private修饰即可。
下面通过一个案例巩固static工具类知识，案例为定义数组工具类：
public static String checkCode(){
        String str="";
        String originalCode="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        Random r=new Random();
        for (int i = 0; i < 4; i++) {
            int index=r.nextInt(originalCode.length());
            str+=originalCode.charAt(index);
        }
        return str;
    }
    private ArraysUtils(){};
代码块：  类的5大组成成分：成员变量、方法、构造器、代码块、内部类！
代码块应该定义在类中 方法外。
在java类下，使用大括号{}括起来的都被成为代码块！！！


静态代码块 ：格式 static{}  随着类的加载而加载 并且自动触发 且只执行一次！
作用：用于初始化静态资源！

实例代码块 ：格式 {}  （见得很少）
每次创建对象，调用构造器时都会执行该代码块中的代码！在构造器前执行！！！
作用：初始化实例资源！
下面来一个静态代码块的应用案例：
案例：斗地主游戏 初始化牌！
public class StaticTest {
    //定义一个静态牌集合
    public static ArrayList<Card> c=new ArrayList<Card>();
    //在程序真正运行前 把54张牌放进去
    static{
        //正式做牌
        String []num={"3","4","5","6","7","8","9","10","J","Q","K","A","2"};
        String [] colo={"♥","♦","♠","♣"};
        for (int i = 0; i < num.length; i++) {
            for (int i1 = 0; i1 < colo.length; i1++) {
                c.add(new Card(num[i],colo[i1]));
            }
        }
        c.add(new Card("小鬼"));
        c.add(new Card("大鬼"));
    }
    public static void main(String[] args) {
        //模拟游戏启动前 初始化54张牌
        System.out.println("新牌：");
        show1(c);
    }
    public static void show1(ArrayList<Card> a){
        for (int i = 0; i < a.size(); i++) {
            a.get(i).show();
        }
    }
}

static应用： 单例设计模式
单例：保证使用该类的只有一个实例！类只能产生一个对象！
实现：
1.将构造器私有化  在外部不可通过构造器创建对象
2.创建一个静态变量 用于存储对象！
饿汉单例  就是想创建好对象了 相用的时候直接用就好
懒汉单例  真正需要对象的时候才去创建对象（延迟加载对象！）
  1.构造器私有 
  2.定义一个静态变量
  3.提供一个返回单例对象的方法
  



