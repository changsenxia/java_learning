之前学过的ArrayList类也是属于集合的一种  他的长度不固定 而且可以支持泛型 泛型只能是引用类型 ！！
首先 集合和数组都是容器！用于装变量的！但是数组进行增删操作是不方便的，数组只有在固定长度、同一批数据类型、比较多的是索引操作
集合中装的是变量智能存储引用类型的数据。 不支持基本数据类型。适合增删操作，且集合的长度不需要确定！。
  集合体系：
Collection（单列）：每个元素只包含一个值！
Map（双列）：每个元素包含两个值（键值对） 有点像python中的字典。

Collection是一个接口！Collection分为List体系（ArrayList和LinkedList）和Set体系（HashSet 和 TreeSet）
  1.List系列集合：添加的元素有序（先加的在前面 后加的在后面）、可重复、有索引。
  2.Set系列集合：添加的元素无序、不重复、无索引
    HashSet：无序、不重复、无索引  但是LinkedHashSet：有序、不重复、无索引
    TreeSet：按照大小默认升序排序，不重复、无索引
Collection集合的常用API：（其他的子类都可以继承过去可以用的）
1.boolean add() //添加对象
2.Collection clear()//清楚集合
3.boolean isEmpty()//判断是否为空
4.int size()//返回大小
5.boolean contains()//区分大小写判断是否包含
6.boolean remove(Object o)//默认删第一个 去除元素
7. Object toChar（）把集合转化为数组 
8.addall（） 添加整个列表
  遍历Collection集合的三种方式：1.迭代器 2.for循环 3.lambda表达式
迭代器在java中代表是Iterator。迭代器是集合的专用遍历方式
方法一：使用迭代器步骤：1.调用Collection.iterator()方法 默认指向索引为0的元素 2.Iterator中的常用方法有 1）boolean hasNext（） 判断是否还有下一个元素 2）next（）获取当前元素并指向下一个
方法二：foreach/增强for循环：既可以遍历数组也可以遍历集合。
  格式：for（元素数据类型 变量名：数组或Collection集合）{sout（）}
方法三：lambda表达式：Collection结合lambda遍历的API forEach（）  l.forEach( s-> System.out.println(s));//l为集合
用Collection集合存储自定义数据类型：使用泛型 Collection<Film> c=new ArrayList(); 
  常见数据结构：栈、队列、数组、链表、二叉树、红黑树
数据结构是计算机底层存储、数据组织的方式 是指  数据相互之间以什么方式排列在一起。
  1.栈：后进先出，先进后出。
  2.队列：先进先出、后进后出：从后端入队、前端出
  3.数组 ：内存中的一个连续区域。查询速度很快！根据索引查询。删除效率低！添加效率也低（增删效率都低）
  4.链表：链表中的元素是内存中不连续存储的，每个元素节点包含数据值和下一个元素的地址。查询会慢、但是添加、删除都会很方便！插入的时候只需把插入数据的下一个地址指向后面的元素 前面的后一个地址指向插入数据即可！
  链表分为单向链表和双向链表
  5.二叉树、二叉搜索树（查找树、排序树）
  每个元素里面包含父节点地址、值、左节点地址、右节点地址。
    二叉树查找树添加节点规则：1.小的存左边、大的存右边 、一样的不存。
  6.平衡二叉树 在查找二叉树的规则下让树尽可能矮小。以此提高性能。
    定义：任意节点的左右两个子树的高度差不超过1任意节点的左右子树都是一颗平衡二叉树。
    一般是通过左旋或者右旋来保证平衡：左左（右旋）、左右（先左旋再右旋）、右右（左旋）、右左（先右再左）
 
 7.红黑树（提高数据增删改查性能）
  一个节点可以是红色也可以是黑色 但是根节点必须是黑色 如果一个节点没有子节点，则该节点相应的指针属性值为Nil，叶子节点是黑色的。
  如果一个节点时红色的，那么子节点必须是黑色的。对于每一个节点来说，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点。（默认用红色 效率高一点
  
  List类：
1.添加 add()
2.删除 remove(){小括号里可以是索引也可以是对象}
3.在某个位置插入 add(int i,E e);
4.根据缩影获取值 get(i);
5.重新设置值  set（）
List类的底层原理：底层是基于数组实现的，第一次创建时，在底层创建一个默认为10 的数组。
  LinkedList类是基于双链表实现的（查询很慢！）首尾操作速度极快！
 LinkedList类特有API：
 1.addFirst（E e）：在改链表的开头插入指定元素
 2.addLast（E e）：在该链表的末尾追加指定元素
 3.getFirst()
 4.getLast()
 5.removeFirst()
 6.removeLast()
 //LinkedList 可以实现 队列、栈结构（双链表）
        //栈
        LinkedList<String> stack=new LinkedList();
        stack.addFirst("第一颗子弹");
        stack.addFirst("第二颗子弹");
        stack.addFirst("第三颗子弹");
        stack.addFirst("第四颗子弹");
        stack.addFirst("第五颗子弹");
        System.out.println(stack);
        System.out.println(stack.removeFirst());
        System.out.println(stack);
        //队列
        LinkedList<String> queue=new LinkedList();
        queue.addLast("第一个排队的");
        queue.addLast("第二个排队的");
        queue.addLast("第三个排队的");
        queue.addLast("第四个排队的");
        queue.addLast("第五个排队的");
        System.out.println(queue);
        System.out.println(queue.removeFirst());
遍历删除 不能用foreach  只能用比较原始的以及迭代器 Iterator it=list.iterator(); while(it.hasNext()){if("java".equals(it.next()){it.remove();}}
  泛型可以在很多地方进行定义：1.类后面 2.方法声明 3.接口 后面
自定义泛型类： 定义类的同时也定义了泛型的类就是泛型类
public class MyArrayList<T>{}

自定义泛型方法：修饰符<泛型变量> 方法返回值方法名（形参列表）{}
public <E> void show(T t){}
例子  重写泛型方法 toString（）：
public class Test2 {
//    private ArrayList<E> a=new ArrayList<E>();
    //给定任意类型的数组 都要返回它的内容，也就是实现Arrays.toString（）的功能
    public static void main(String[] args) {
        String[] names={"小路","蓉蓉","小何"};

        Integer[]age={10,20,30};
        printarray(age);
        printarray(names);
    }
    public static <E> void printarray(E[] e) {

    if (e!=null){
        StringBuilder s=new StringBuilder("[");
        for (int i = 0; i <e.length; i++) {
            s.append(e[i]).append(i==e.length-1?"]":",");
        }
        System.out.println(s);
    }
    else
        System.out.println(e);
    }
}
自定义泛型接口 在接口后面加泛型  public interface Data<E>{}
作用：泛型接口可以让实现类选择当前功能需要操作的数据类型
案例：教务系统  提供一个接口 可约束一定要完成数据（学生，教师）的增删改查操作

泛型 通配符 ：？ 可以在、、使用泛型、、的时候代表一切泛型！！！！
泛型的上下限：
  上限：?extends Car 表示参与的类必须是Car或者其子类 泛型上限
  下限：?super Car  表示参与的类必须是Car或者其父类 泛型下限
  
