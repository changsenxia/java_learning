什么是面向对象？ 面向：找，拿  对象：东西 翻译为找或拿东西来编程
设计对象与使用，需要设计类 通过实例化来形成对象。
类：对象共同特征的描述
对象：类的实例化
设计类：
Public class 类名{
  1.成员变量（属性）
  2.成员方法（行为）
  3.构造器
  4.代码块
  5.内部类//3,4,5后面几节再聊。
}
如何通过类名创建对象：类名 对象名=new 类名（）
类名的定义需要满足大驼峰式！
一个java文件可以包含多个class类 但是只有一个class类可以用public修饰，实际开发中还是定义一个文件定义一个类。
成员变量的完整定义格式： 修饰符 数据类型 变量名=初始值 修饰符的作用在后面会提到。
  对象在内存中的工作机制:主要还是方法区、栈内存、堆内存。方法区里存的是一些字节码，栈内存里存放的是一些个方法以及变量、堆内存里存放一些new出来的。
垃圾回收：当堆内存中的对象，没有被任何变量引用时，就会被判定为内存中的“垃圾”。
java自己有自动垃圾回收机制。
下面来一个例子来巩固面向对象编程：模拟购物车模块  在面向对象编程中 万物皆为对象 需要用 那就创建一个类 用类实例化一个对象来搞。
public class ShopCar {
    public static void main(String[] args) {
        //定义商品类
        //定义购物车对象  使用容器  用数组表示
        Goods[] car=new Goods[100];//定义只能存放100个商品对象
        //搭建操作架构
        while(true) {
            System.out.println("请你选择如下命令进行操作：");
            System.out.println("添加商品到购物车：add");
            System.out.println("查询商品到购物车：query");
            System.out.println("通过id来更新商品：update");
            System.out.println("结算购买商品的金额：pay");
            Scanner sc = new Scanner(System.in);
            String order = sc.next();
            switch (order) {
                case "add":
                    //添加商品到购物车
                    add(car, sc);
                    break;
                case "query":
                    //查询商品
                    queryGoods(car);
                    break;
                case "pay":
                    //总金额
                    pay(car);
                    break;
                case "update":
                    //更新购物车
                    update(car,sc);
                    break;
                 default:
                     System.out.println("没有这种功能！");
                     break;
            }
        }

    }

    public static void update(Goods[] car,Scanner sc) {
        System.out.println("请输入id：");
        int id=sc.nextInt();
        if(car[0]==null)
            System.out.println("购物车为空！请先添加商品！");
        for (int i = 0; i < car.length; i++) {
            if(car[i]==null)
                break;
            if(car[i].id==id){
                System.out.println("请输入要修改的数量：");
                int new_num=sc.nextInt();
                car[i].buyNumber=new_num;
            }
        }
    }

    public static void pay(Goods[] car) {
        double sum = 0.0;
        for (int i = 0; i < car.length; i++) {
            if(car[i]==null)
                break;
            sum+=car[i].price*car[i].buyNumber;

        }
        System.out.println("购物车总价格为"+sum+"元");
    }
    /**
     * 查询购物车中的商品对象信息并展示
     * */
    public static void queryGoods(Goods[] car) {
        if(car[0]==null)
            System.out.println("购物车为空！请先添加商品！");
        for (int i = 0; i < car.length; i++) {
            if(car[i]==null)
                break;
            System.out.println("id为"+car[i].id+"的"+car[i].name+"他的价格为"+car[i].price+"一共添加了"+car[i].buyNumber+"件");

        }
    }
    /**
     * 完成商品添加到购物车功能
     * */
    public static void add(Goods[] car,Scanner sc) {
        //录入商品信息
        System.out.println(" input a id :");
        int id=sc.nextInt();
        System.out.println("输入购买商品的名称：");
        String name=sc.next();
        System.out.println("输入购买商品的数量：");
        int buyNumber=sc.nextInt();
        System.out.println("输入购买商品的price：");
        double price=sc.nextDouble();
        //吧信息封装成一个商品对象
        Goods good=new Goods();
        good.id=id;
        good.buyNumber=buyNumber;
        good.price=price;
        good.name=name;
        //将商品放入数组
        for(int i=0;i<car.length;i++){
            if(car[i]==null){
                car[i]=good;
                break;
            }
        }
        System.out.println("添加成功");
    }
}
下面会学习构造器 通过学习构造器会知道对象具体是调用什么代码得到的 能够快速为对象赋值
构造器是定义在类中，可以用于初始化类的对象，并返回对象的地址
构造器的格式：修饰符 类名（形参列表）{}#相当于就是一个初始化
构造器又分为无参构造器和有参构造器，其中无参构造器是默认存在的，有参构造器在初始化对象时创建的同时可以初始化属性。
默认是有无参构造器的，下面是一个有构造器的Car类源码：
public class Car {
    //构造器
    public Car(){

    }
    public Car(String name,double price){
        this.price=price;
        this.name=name;
    }
    //成员变量
    String name;
    double price;
    //行为
    public void start(){
        System.out.println(this.name+"启动了");
    }
    public void run(){
        System.out.println("价值"+this.price+"的"+this.name+"跑起来了");
    }

    public static void main(String[] args) {
        Car c=new Car();
        c.run();
        c.start();
    }
}
  关于构造器的注意事项：
    1.默认有无参构造器，一旦定义了有参构造器 就得手写一个无参构造器才行。
this关键字
  this可以出现在构造器和方法中。this代表的是当前对象的地址。
  this关键字的作用与python中的self类似，可以用于指定访问当前对象的成员变量和方法。
面向对象的三大特征：封装、继承、多态
下面学习封装： 封装即正确设计对象的属性和方法
封装的原则：对象代表什么、就是封装对应的数据提供数据对应的行为
既然封装有这么多好处 如何更好地封装？
  1.建议对成员变量用private（私有、隐藏）关键字进行修饰（private修饰的变量只能在当前类中访问），在其他类中调用时报错的
  2.对于用private修饰的成员变量 必须要用对应的public（对外公开 在别的类中也可以调用）修饰的setter和getter方法来取值和赋值  
标准javabean
  javabean的中文意思是实体类，即在生活中有对应个体的叫实体类。下面需要学习标准javabean的书写要求：
    1.成员变量用private
    2.用private修饰的变量 应该提供对应的public修饰的setter和get方法来获取和设置
    3.构造无参构造器，有参构造器可写可不写
下面通过一个面向对象的案例来巩固
案例：用面向对象的思想来模仿电影信息展示
public class film {
    private String name;
    private double price;//票房
    private String [] actor;
    private String area;
    private String [] director;
    private double scores;//评分
    public String getName(){
        return name;
    }
    public void setName(String name){
        this.name= name;
    }
    public double getPrice(){
        return price;
    }
    public void setPrice(double price){
        this.price=price;
    }
    public void getactor(){
        for (int i = 0; i < actor.length; i++) {
            if(actor[i]!=null){
                System.out.println(actor[i]);
            }
            else
                break;
        }
    }
//    public void addactor(){
//        for (int i = 0; i < actor.length; i++) {
//            if(actor[i]!=null){
//                System.out.println(actor[i]);
//            }
//            else
//                break;
//        }
//    }
    public double getScore(){
        return scores;
    }
    public void setScore(double scores){
        this.scores=scores;
    }
