数组就是在内存中开辟一块连续的空间用于存储变量（数组可以理解为容器） 定义不同类型的数组 只能容纳同类型的变量
定义格式： 数据类型[] 数组名={}
数组的定义、数组的访问、数组数据的操作、如何通过数组解决实际问题、数组内存原理以及数组使用注意点：
  1.数组定义：数组的定义分为静态和动态
  静态初始化数组 即定义数组时直接赋值即可 例如int []age=new int[] {12,24,36}/还有一种简化写法 int []age={12,24,36} 
  静态创建数组后，内存会开辟一块区域用于存储数组中的变量，然后内存中首元素的地址存放在数组名中 即age中存放的是数组的首地址。数组是一个引用数据类型 
  数组的访问直接通过数组名[索引]去访问即可  数组中的数据的访问十分方便快捷 复杂度为O(1) 数组中的索引从0 开始 数组有一个属性length 表示数组有多少个元素/长度是多少 通过age.length
  java也是一个面向对象的编程方法，引用数据类型可以看成是一个对象，是类的一个实例化 这个对象有属性和方法。
  数组中的注意事项 1.数组的定义可以是 数据类型[]数组名也可以用 数据类型 数组名[] 2.什么类型的数组只能存储相同类型的元素3.数组一旦定义，数组的类型、长度就固定了
  
  动态初始化数组：只定义数组的类型和长度 而不存放数据进去 例如int []ages= new int[3]  这种情况 数组的元素都默认为0. bool类型的数组默认值为false string默认值为null
  数组的遍历：遍历就是一个一个的数据访问，搜索 数据统计都需要遍历去获取数据
 例子：
 int [] arr={12,98,24,34,98};
 for(int i=0;i<arr.length;i++){
  System.out.println(ar[i]);
 }
 一些数组使用案例：
 案例1. 某部门有5名员工的销售金额分别为：16，26,36,6,100 计算销售金额总和
 int [] sale={16,26,36,6,100};
 int sum=0;
 for(int i=0;i<sale.length;i++){
  sum+=sale[i];
 }
 System.out.println("部门总销售为"+sum+"万元");
 案例2.数组求最值
 int [] beau={15,9000,10000,20000,9500,-5};
 int max=0;
 for(inti=1;i<beau.length;i++){
  if(beau[i]>beau[max]){
    max=i
  }
 }
 System.out.println("最好看的是第"+(max+1)+"她的颜值为"+beau[max]);
 案例3.猜数字游戏 随机生成5个1-20之间的数字 然后大家来猜
 分析：首先动态创建一个数组用于存储这5个随机数字，然后跟用户交互让用户输入数字，遍历数组 看输入的数字是否在数组中在的话就直接输出第一次出现的位置并且输出全部数组元素big返回
 int [] num=new int[5];
        Random d=new Random();
        Scanner sc=new Scanner(System.in);
        for(int i=0;i<num.length;i++) {
            num[i]=d.nextInt(20)+1;
        }//到目前为止五个随机数字已经放入数组中，下面开始猜数字
        while(true){
            System.out.println("请输入你猜的数字");
            int gue=sc.nextInt();
            for(int i=0;i<num.length;i++){
                if(gue==num[i]) {
                    System.out.println("运气不错，猜中了，该数字第一次出现在" + (i + 1));
                    for (int j = 0; i < num.length; j++)
                        System.out.println(num[j]);
                    break;
                }
            }
            System.out.println("运气不好，请继续猜测！");
        }
  案例4.随机排名 某公司有五名开发人员，需要进行汇报，采取随机排名后进行汇报依次录入 员工工号 然后展示随机排名顺序 随机排名可以用于洗牌这样的场景 深度学习中DataLoader中shuffle也是类似的功能吧
  分析：先用数组存储员工工号，遍历数组 随机遍历一个索引与其交换位置
     Random d=new Random();
        int[] go=new int[]{22,33,35,13,88};
        for(int i=0;i<go.length;i++){
            int t;
            int j=d.nextInt(5);
            t=go[i];go[i]=go[j];go[j]=t;
        }
        for (int k=0;k<go.length;k++){
            System.out.println(go[k]);
        }
案例5.数组排序 对数组中的元素进行升序或降序等操作
数组排序的常用技术：冒泡排序、选择排序、快速排序、插入排序
1）冒泡排序 每次遍历都会把最大的数放到数组最后面 主要是两个循环 第一个循环控制比较次数第二次循环控制元素比较。
 //冒泡排序
        int []arr={5,2,3,1};
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr.length-i-1;j++){
                int t;
                if (arr[j]>arr[j+1]){
                    t=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=t;
                }
            }
        }
        for(int k=0;k<arr.length;k++){
            System.out.println(arr[k]);
        }
 3.数组的内存图
 java中的内存分配分配主要有五个部分：1.栈 2.堆 3.方法区 4.本地方法栈 5.寄存器 （不同区域干不同事，提升效率）主要掌握栈、堆、方法区
 方法区：字节码文件加载时进入的内存 
 栈内存：方法运行时所进入的内存 变量也是存在这里
 堆内存：new出来的东西会在堆内存中开辟空间并产生地址
 在实际开发中，还会出现两个变量指向同一个数组
 
4.Debug工具：
  IDEA自带的断点调试工具，可以控制代码从开始一行行的执行，然后详细观看程序执行情况：点击形成断点 然后使用debug工具去运行。
  
  
 
 
 
 
 
